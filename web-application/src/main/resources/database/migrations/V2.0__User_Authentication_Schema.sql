-- access_scopes

DROP TABLE IF EXISTS access_scopes CASCADE;

CREATE TABLE access_scopes
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO access_scopes (id, name)
VALUES (1, 'System'), (2, 'Application');


-- customer_status

DROP TABLE IF EXISTS customer_status CASCADE;

CREATE TABLE customer_status
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO customer_status (id, name)
VALUES (1, 'Active'), (2, 'Suspended'), (3, 'Deleted');

-- customers

DROP TABLE IF EXISTS customers CASCADE;

CREATE TABLE customers
(
	id                 BIGINT                   NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

	uid                UUID                     NOT NULL UNIQUE DEFAULT UUID_GENERATE_V4(),

	access_scope_id    INTEGER                  NOT NULL REFERENCES access_scopes (id) ON UPDATE CASCADE ON DELETE CASCADE,

	identity           TEXT                     NOT NULL,
	name               TEXT                     NOT NULL,

	status_id          INTEGER                  NOT NULL REFERENCES customer_status (id) ON UPDATE CASCADE ON DELETE CASCADE,
	is_active          BOOLEAN                  NOT NULL        DEFAULT TRUE,

	created_by         BIGINT                   NOT NULL,
	updated_by         BIGINT                   NOT NULL,
	deleted_by         BIGINT                   NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	update_timestamp   TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	deletion_timestamp TIMESTAMP WITH TIME ZONE NULL,

	version            INTEGER                  NOT NULL        DEFAULT 0
);

INSERT INTO customers (access_scope_id, identity, name, status_id, created_by, updated_by)
VALUES (1, 'locationguru-solutions', 'LocationGuru Solutions', 1, 1, 1),
       (2, 'matrix-incorporated', 'Matrix Incorporated', 1, 1, 1);

-- role_types

DROP TABLE IF EXISTS role_types CASCADE;

CREATE TABLE role_types
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO role_types (id, name)
VALUES (1, 'Administrator'), (2, 'Support'), (3, 'User'), (4, 'Guest');

-- roles

DROP TABLE IF EXISTS roles CASCADE;

CREATE TABLE roles
(
	id                 BIGINT                   NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

	uid                UUID                     NOT NULL UNIQUE DEFAULT UUID_GENERATE_V4(),

	access_scope_id    INTEGER                  NOT NULL REFERENCES access_scopes (id) ON UPDATE CASCADE ON DELETE CASCADE,
	type_id            INTEGER                  NOT NULL REFERENCES role_types (id) ON UPDATE CASCADE ON DELETE CASCADE,

	identity           TEXT                     NOT NULL,

	name               TEXT                     NOT NULL,
	description        TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO roles (access_scope_id, type_id, identity, name, description)
VALUES (1, 1, 'system-administrator', 'System Administrator', 'Global administrator of application'),
       (1, 2, 'system-support', 'System Support', 'Support user for day to day operations'),
       (1, 3, 'system-user', 'System User', 'General purpose system user'),
       (2, 1, 'customer-administrator', 'Customer Administrator', 'Administrator of the customer account'),
       (2, 2, 'customer-support', 'Customer Support', 'Support user for the customer account'),
       (2, 3, 'application-user', 'Application User', 'General purpose application user'),
       (2, 4, 'guest', 'Guest', 'Unauthenticated User');

-- user_status

DROP TABLE IF EXISTS user_status CASCADE;

CREATE TABLE user_status
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO user_status (id, name)
VALUES (1, 'Active'), (2, 'Inactive'), (3, 'Deactivated'), (4, 'Suspended'), (5, 'Deleted');

-- genders

DROP TABLE IF EXISTS genders CASCADE;

CREATE TABLE genders
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO genders (id, name)
VALUES (1, 'Not Specified'), (2, 'Male'), (3, 'Female');

-- users

DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE users
(
	id                 BIGINT                   NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

	uid                UUID                     NOT NULL UNIQUE DEFAULT UUID_GENERATE_V4(),

	customer_id        BIGINT                   NOT NULL REFERENCES customers (id) ON UPDATE CASCADE ON DELETE CASCADE,
	role_id            BIGINT                   NOT NULL REFERENCES roles (id) ON UPDATE CASCADE ON DELETE CASCADE,

	identity           TEXT                     NOT NULL,

	first_name         TEXT                     NOT NULL,
	last_name          TEXT                     NOT NULL,
	display_name       TEXT                     NOT NULL,

	contact_number     TEXT                     NOT NULL        DEFAULT '',
	email_address      TEXT                     NOT NULL        DEFAULT '',

	birth_date         TIMESTAMP WITH TIME ZONE NULL,

	gender_id          INTEGER                  NOT NULL REFERENCES genders (id) ON UPDATE CASCADE ON DELETE CASCADE,
	status_id          INTEGER                  NOT NULL REFERENCES user_status (id) ON UPDATE CASCADE ON DELETE CASCADE,
	is_active          BOOLEAN                  NOT NULL        DEFAULT TRUE,

	created_by         BIGINT                   NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	updated_by         BIGINT                   NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	deleted_by         BIGINT                   NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	update_timestamp   TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	deletion_timestamp TIMESTAMP WITH TIME ZONE NULL,

	version            INTEGER                  NOT NULL        DEFAULT 0
);

INSERT INTO users (customer_id, role_id, identity, first_name, last_name, display_name, gender_id, status_id, created_by, updated_by)
VALUES (1, 1, 'kedar.joshi', 'Kedar', 'Joshi', 'Kedar Joshi', 1, 1, 1, 1);

ALTER TABLE customers
	ADD CONSTRAINT customers_created_by_fkey FOREIGN KEY (created_by) REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	ADD CONSTRAINT customers_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	ADD CONSTRAINT customers_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE;

-- authentication_type

DROP TABLE IF EXISTS authentication_type CASCADE;

CREATE TABLE authentication_type
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO authentication_type (id, name)
VALUES (1, 'User Name'),
       (2, 'Email'),
       (3, 'Mobile Number'),
       (4, 'Single Sign-On'),
       (5, 'LDAP / Active Directory'),
       (6, 'API Key');

-- authentication_status

DROP TABLE IF EXISTS authentication_status CASCADE;

CREATE TABLE authentication_status
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO authentication_status (id, name)
VALUES (1, 'Active'), (2, 'Deprecated'), (3, 'Pending Reset'), (4, 'Expired'), (5, 'Suspended');

-- authentications

DROP TABLE IF EXISTS authentications CASCADE;

CREATE TABLE authentications
(
	id                   BIGINT                   NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

	uid                  UUID                     NOT NULL UNIQUE DEFAULT UUID_GENERATE_V4(),

	customer_id          BIGINT                   NOT NULL REFERENCES customers (id) ON UPDATE CASCADE ON DELETE CASCADE,
	user_id              BIGINT                   NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	type_id              INTEGER                  NOT NULL REFERENCES authentication_type (id) ON UPDATE CASCADE ON DELETE CASCADE,

	identity             TEXT                     NOT NULL,
	password             TEXT                     NOT NULL,

	expiration_timestamp TIMESTAMP WITH TIME ZONE NULL,

	status_id            INTEGER                  NOT NULL REFERENCES authentication_status (id) ON UPDATE CASCADE ON DELETE CASCADE,
	is_active            BOOLEAN                  NOT NULL        DEFAULT TRUE,

	creation_timestamp   TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	update_timestamp     TIMESTAMP WITH TIME ZONE NOT NULL        DEFAULT CLOCK_TIMESTAMP(),
	deletion_timestamp   TIMESTAMP WITH TIME ZONE NULL,

	version              INTEGER                  NOT NULL        DEFAULT 0
);

INSERT INTO authentications(customer_id, user_id, type_id, identity, password, expiration_timestamp, status_id)
VALUES (1, 1, 1, 'administrator', 'PV6cROq9mNVkRv5ulJ7sqVJMeW2kcGkQCCRLHmkFUJuvtBM0IDWCRR8ABpRhRTqmgU0MbtnkhIERPtD9HGOerQ1NBLp+o7HKM7g06ZmC/KY=', '2021-01-01 00:00:00.000', 1);

-- token_status

DROP TABLE IF EXISTS token_status CASCADE;

CREATE TABLE token_status
(
	id                 INTEGER                  NOT NULL PRIMARY KEY,

	name               TEXT                     NOT NULL,

	creation_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP()
);

INSERT INTO token_status (id, name)
VALUES (1, 'Active'), (2, 'Expired');

-- tokens

DROP TABLE IF EXISTS tokens CASCADE;

CREATE TABLE tokens
(
	id                            BIGINT                   NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

	uid                           UUID                     NOT NULL UNIQUE,

	customer_id                   BIGINT                   NOT NULL REFERENCES customers (id) ON UPDATE CASCADE ON DELETE CASCADE,
	user_id                       BIGINT                   NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
	authentication_id             BIGINT                   NOT NULL REFERENCES authentications (id) ON UPDATE CASCADE ON DELETE CASCADE,

	identity                      TEXT                     NOT NULL UNIQUE,

	expected_expiration_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
	expiration_timestamp          TIMESTAMP WITH TIME ZONE NULL,
	expiration_date               DATE                     NULL,

	status_id                     INTEGER                  NOT NULL REFERENCES token_status (id) ON UPDATE CASCADE ON DELETE CASCADE,
	is_active                     BOOLEAN                  NOT NULL DEFAULT TRUE,

	creation_timestamp            TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP(),
	update_timestamp              TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CLOCK_TIMESTAMP(),
	deletion_timestamp            TIMESTAMP WITH TIME ZONE NULL
);

CREATE INDEX tokens_expiration_date_index ON tokens USING BTREE (expiration_date);

